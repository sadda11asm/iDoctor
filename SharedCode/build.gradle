apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.wiredforcode.spawn'




kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('SharedCode')
            }
        }

        fromPreset(presets.jvm, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31'
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1"
            implementation "io.ktor:ktor-client:1.1.2"
            implementation "org.koin:koin-core:1.1.2"
            implementation "io.ktor:ktor-client-json:1.1.2"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:0.9.0"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            api "io.ktor:ktor-client-json-jvm:1.1.2"
            api 'io.ktor:ktor-client-okhttp:1.1.2'
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.9.0"

        }

        iosMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib'
            //implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.9.0"
            implementation "io.ktor:ktor-client-ios:1.1.2"
            //implementation "io.ktor:ktor-client-ios-iosarm64:1.0.3"
            //implementation "io.ktor:ktor-client-ios-iosx64:1.0.3"
            //implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.0-M1@jar"
            implementation "io.ktor:ktor-client-json-native:1.1.2"

        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode