apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.wiredforcode.spawn'
apply plugin: 'com.squareup.sqldelight'





kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('SharedCode')
            }
        }

        fromPreset(presets.jvm, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "io.ktor:ktor-client-json:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
            implementation 'io.github.microutils:kotlin-logging-common:1.6.24'
//            implementation "com.squareup.sqldelight:runtime-metadata:1.1.3"
            implementation "io.ktor:ktor-client-websockets:$sockets_version"
            implementation "io.ktor:ktor-client-cio:$ktor_version"
            implementation "io.ktor:ktor-client-js:$ktor_version"
            implementation "io.ktor:ktor-client-okhttp:$ktor_version"
//            implementation "com.squareup.sqldelight:runtime-metadata:1.1.3"
        }

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            api "io.ktor:ktor-client-android:$ktor_version"
            api "io.ktor:ktor-client-json-jvm:$ktor_version"
            api "io.ktor:ktor-client-core-jvm:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
            implementation "io.ktor:ktor-client-logging-jvm:1.1.3"
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
            implementation 'io.github.microutils:kotlin-logging:1.6.24'
            implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            implementation "com.squareup.sqldelight:runtime-jvm:1.1.3"
            implementation "com.squareup.sqldelight:android-driver:1.1.3"

//            implementation "com.squareup.okhttp3:logging-interceptor:3.14.1"

        }

        iosMain{
            dependsOn commonMain
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                //implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:0.9.0"
//                implementation "io.ktor:ktor-client-json-iosx64:1.1.3"
//                implementation "io.ktor:ktor-client-ios-iosx64:1.1.3"
                implementation "io.ktor:ktor-client-ios:$ktor_version"
//                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.1.1@jar"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
                implementation "com.squareup.sqldelight:ios-driver:1.1.3"//DataBase

            }
        }
    }
}

sqldelight {
    iDoctorDatabase {
        //The package where all entities will be generated in
        //More options https://github.com/square/sqldelight
        packageName = 'com.example.mpp'
        sourceFolders = ["sqldelight"]

    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("SharedCode", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode